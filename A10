// INCLUDES AND DEFINES
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

#ifndef __TRUE_FALSE__
#define __TRUE_FALSE__
#define TRUE 1
#define FALSE 0
#endif

#define NO_INVERSE -1
#define ERROR -2
#define A 19
#define B 4
#define ALPHABET_SIZE 26
#define ASCII_OFFSET 97
#define BUFFER_SIZE 1000

// PROTOTYPES
char *EncryptString(char*, int, int, int);
char *DecryptString(char*, int, int, int);
int ModularInverse(int, int);
int IsPrime(int);
int CoprimeTest(int, int);

// MAIN
int main() {
	// create a sanitized string
	char cleanString[BUFFER_SIZE] = "thequickbrownfoxjumpedoverthelazydogs";

	if (CoprimeTest(A, ALPHABET_SIZE) == FALSE) {
		printf("Failed coprime test.\n");
	}
	else {

		// display the string before encryption
		printf("Before encryption, the string contains:\n");
		puts(cleanString);
		printf("\n");

		// encrypt the string
		EncryptString(cleanString, A, B, ALPHABET_SIZE);

		// display the string after encryption
		printf("After encryption, the string contains:\n");
		puts(cleanString);
		printf("\n");

		// decrypt the string
		DecryptString(cleanString, A, B, ALPHABET_SIZE);

		// display the string after decryption
		printf("After decryption, the string contains:\n");
		puts(cleanString);
		printf("\n");
	}

	// exit program
	_getch();
	return 0;

}

// FUNCTION IMPLEMENTATIONS

char *EncryptString(char* encryptMe, int a, int b, int n) {
	// YOUR IMPLEMENTATION GOES HERE
	int y = 0;
	int j = 0;
	int index = 0;
	int size = 0;

	while (encryptMe[j] != '\0') {
		size++;
		j++;
	}

	for (int i = 0; i < size; i++)
	{
		if (encryptMe[i] != ' ') {
			index = (int)encryptMe[i] - 'a';
			y = (a * index + b) % ALPHABET_SIZE;

			encryptMe[i] = (char)y + ASCII_OFFSET;
		}
		else {
			encryptMe[i] = ' ';
		}
	}

	return encryptMe;  
} // end - EncryptString()

char *DecryptString(char* decryptMe, int a, int b, int n) {
	// YOUR IMPLEMENTATION GOES HERE
	int y = 0;
	int index = 0;
	int j = 0;
	int size = 0;

	while (decryptMe[j] != '\0') {
		size++;
		j++;
	}

	for (int i = 0; i < size; i++) {
		if (decryptMe[i] == ' ') {
			decryptMe[i] = ' ';
		}
		else {
			index = (int)decryptMe[i] - 'a';
			y = ModularInverse(0,0) * (index - B) % ALPHABET_SIZE;

			if (y < 0) {
				y += ALPHABET_SIZE;
			}

			decryptMe[i] = (char)y + ASCII_OFFSET;
		}
	}

	return decryptMe;
} // end - DecryptString()

int ModularInverse(int target, int mod) {
	// AN IMPLEMENTATION FOR THIS FUNCTION WAS PROVIDED IN CLASS
	int x = 0;

	while (target != 1) {
		if ((A * x) % ALPHABET_SIZE != 1) {
			target = 0;
			x++;
		}
		else {
			target = 1;
		}
	}

	return x;
} // end - ModularInverse()

int IsPrime(int amIPrime) {
	// AN IMPLEMENTATION FOR THIS FUNCTION WAS PROVIDED IN CLASS
	int i = 0;
	int isPrime = TRUE;

	// check for border cases
	if (amIPrime <= 1) {
		isPrime = FALSE;
	}

	// force check the number for primality
	for (i = 2; i < amIPrime; i++) {
		if (amIPrime % i == 0)
			isPrime = FALSE;
	}

	return isPrime;
} // end - IsPrime()

int CoprimeTest(int numOne, int numTwo) {
	// AN IMPLEMENTATION FOR THIS FUNCTION WAS PROVIDED IN CLASS
	int i = 0;
	int areCoprime = TRUE;
	int larger = 0;
	int smaller = 0;

	// determine that larger of the two numbers
	if (numOne >= numTwo) {
		larger = numOne;
		smaller = numTwo;
	}
	else {
		larger = numTwo;
		smaller = numOne;
	}

	for (i = 1; i <= larger; i++) {
		// find a prime factor for numOne
		if (larger % i == 0 && IsPrime(i))
			// determine if numTwo is divisible by the candidate prime
			if (smaller % i == 0)
				areCoprime = FALSE;
	}

	// return the result
	return areCoprime;
} // end - CoprimeTest()
