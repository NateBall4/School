// INCLUDES
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>
#include <algorithm>
// DEFINES
#define LOWER_DIE 1 // LOWER_DIE must be at least 1
#define UPPER_DIE 10
#define TRIALS 10000 
#define X -1
// PROTOTYPES
int genRand(int, int);
int getTwoDieSum();

// MAIN
int main() {
	int numberArray[2 * UPPER_DIE + 1]; // holds frequency of rolls
	int a = 0;
	int b = 0;
	int x = 0;
	// initialize numberArray
	/*std::fill_n(numberArray, 2 * UPPER_DIE + 1, 0);*/
	//dont use int x in for loop
	while (numberArray[2 * UPPER_DIE + 1] != X) {
		numberArray[x++] = 0;
		if (numberArray[2 * UPPER_DIE + 1] == 0) {
			numberArray[2 * UPPER_DIE + 1] = X;
		}
	}

	// seed the random number generator
	srand((unsigned int)time(NULL));

	// roll the dice and keep track of what was rolled in the array (ALT)
	for (int x = 0; x < TRIALS; x++) {
		numberArray[getTwoDieSum()]++;
	}

	// display results
	printf("Roll Value: ");
	printf("Frequency\n");

	for (int i = 2; i < 2 * UPPER_DIE + 1; i++) {
		printf("%10d: ", i);
		printf("%d\n", numberArray[getTwoDieSum()]);
	}
	_getch();
	return 0;
}

// FUNCTION IMPLEMENTATIONS
int genRand(int lower, int upper) {
	int range = (upper - lower) + 1;
	return rand() % range + lower;
}

int getTwoDieSum() {
	// YOUR IMPLEMENTATION GOES HERE
	return genRand(LOWER_DIE, UPPER_DIE) + genRand(LOWER_DIE, UPPER_DIE);
}
