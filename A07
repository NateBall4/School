// INCLUDES 
#include <stdio.h> 
#include<conio.h>

// DEFINES 
#ifndef __TRUE_FALSE__ 
#define __TRUE_FALSE__ 
#define TRUE 1 
#define FALSE 0 
#endif // ROWS and COLS must be between 1 and 9 
#define ROWS 7 
#define COLS 7 
#define MARKONE 'X' 
#define MARKTWO 'O' 
#define BLANK ' ' 

// PROTOTYPES 
void InitializeBoard(char[ROWS][COLS]);
void DisplayBoard(char[ROWS][COLS]);
int PlayerMove(int, int, char[ROWS][COLS], char);

// MAIN 
int main() {
	// declare variables 
	char board[ROWS][COLS];

	// initialize board 
	InitializeBoard(board);

	// populate the board with moves 
	PlayerMove(1, 1, board, MARKONE);
	PlayerMove(1, 2, board, MARKONE);
	PlayerMove(4, 3, board, MARKONE);
	PlayerMove(1, 2, board, MARKTWO);
	PlayerMove(6, 2, board, MARKTWO);
	PlayerMove(4, 12, board, MARKTWO);

	// display the board 
	DisplayBoard(board);

	// exit program 
	_getch();
	return 0;
}

// FUNCTION IMPLEMENTATIONS 
void InitializeBoard(char board[ROWS][COLS]) {
	// YOUR IMPLEMENTATION GOES HERE 

	for (int i = 0; i < ROWS; i++) {
		for (int j = 0; j < COLS; j++) {
			board[i][j] = BLANK;
		}
	}
}


void DisplayBoard(char board[ROWS][COLS]) {
	// YOUR IMPLEMENTATION GOES HERE 
	int counter = 0;
	char space = ' ';

	//prints the number of colums
	printf("\n");
	for (int x = 1;x < COLS + 1;x++) {
		printf("%4d", x);
	}
	printf("\n");
	
	//prints the seperator under the number of colums
	printf("%c", BLANK);
	printf("+");
	for (int i = 0; i < COLS; i++) {
		printf("---+");
	}

	printf("\n");

	char sym = '|';
	char line = '-';
	//prints Rows
	for (int j = 1; j <= ROWS; j++) {
		printf("\n");

		printf("%d", j, sym);
		//prints Colums
		for (int x = 1; x <= COLS; x++) {
			printf("%c%3c", sym,board[x][j]);
		}
		//prints the seperators between rows
		printf("\n");
		while (counter < COLS) {
			printf("%c%c%c%c",line,line, line, line);
			counter++;
		}
		counter = 0;
	}



}

#define MOVE_UNDETERMINED	-1
#define MOVE_OK				0
#define MOVE_COLLISION		1
#define MOVE_OUT_OF_BOUNDS	2

int PlayerMove(int row, int col, char board[ROWS][COLS], char symbol) {
	board[row][col] = board[ROWS][COLS];
	
	int moveAttemptStatus = MOVE_UNDETERMINED;

	// Determine if this move is out of bounds with a single test...
	if (row > ROWS || col > COLS) {
		moveAttemptStatus = MOVE_OUT_OF_BOUNDS;
		symbol = ' ';
	// Determine if the move is a collision with a single test...
	}
	else if (board[ROWS][COLS] != BLANK) {
		moveAttemptStatus = MOVE_COLLISION;
	}
	// It wasn't a collision, it wasn't out of bounds... it must be good.
	else {
		// MAKE THE MOVE!
		
		moveAttemptStatus = MOVE_OK;
	}


	if (moveAttemptStatus == MOVE_OUT_OF_BOUNDS) {
		symbol = ' ';
	}
	else if (moveAttemptStatus == MOVE_COLLISION) {
		if (symbol == MARKONE) {
			symbol = MARKTWO;
		}
		else if (symbol == MARKTWO) {
			symbol = MARKONE;
		}
	}

	board[row][col] = symbol;
	// Report back to the client code about what happened with the move attempt.
	return moveAttemptStatus;
	
	
	
	
	
	
	//// YOUR IMPLEMENTATION GOES HERE 
	//
	////checks for out of bounds
	//if (col > COLS) {
	//	symbol = BLANK;
	//}
	//else if (row > ROWS) {
	//	symbol = BLANK;
	//}

	////checks to see if the space is already occupied
	//if (board[col][row] != BLANK && symbol == MARKTWO) {
	//	symbol = MARKONE;
	//}
	//else if (board[col][row] != BLANK && symbol == MARKONE) {
	//	symbol = MARKTWO;
	//}

	//board[row][col] = board[ROWS][COLS];
	//board[row][col] = symbol;

	//

	//return symbol;
}
