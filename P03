// INCLUDES AND DEFINES
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>
#include <math.h>

#pragma warning(disable:4996)

#ifndef __TRUE_FALSE__
#define __TRUE_FALSE__
#define TRUE 1
#define FALSE 0
#endif
#define BUFFER_SIZE 10000
#define INPUT_FILE "input.txt"
#define OUTPUT_FILE "output.txt"
#define ASCII_UPPER_LOWER_OFFSET 32
#define NO_INVERSE -1
#define ERROR -2
#define ALPHABET_SIZE 26
#define ASCII_OFFSET 97

// PROTOTYPES
char *ReadStringFromFile(FILE*, char*);
char *WriteStringToFile(FILE*, char*);
char *CleanString(char*);
char *EncryptString(char*, int, int, int);
char *DecryptString(char*, int, int, int);
int ModularInverse(int, int);
int IsPrime(int);
int CoprimeTest(int, int);

int main() {
	int choice = 0;
	int j = 0;
	int a = 1;
	double power = 1;
	int b = 1;
	int size = 0;
	int newSize = 0;
	char charArray[BUFFER_SIZE] = " ";
	char input[BUFFER_SIZE] = "input.txt";
	char output[BUFFER_SIZE] = "output.txt";
	//if the user doesn't input 7 keep repeating the loop
	while (choice != 7) {
		printf("--- CIS 111 - Affine Cipher Program - Author: Nathan Ball -----\n");
		printf("----------------------------------------------------------------\n");
		printf("The current input file is : %s\n", input);
		printf("The current output file is: %s\n", output);
		printf("Affine Cipher - e(x) = (Ax + B)(mod 26)\n");
		printf("A = %d A^(-1) = %f\n", a, power);
		printf("B = %d\n", b);
		printf("----------------------------------------------------------------\n");
		printf("Please select an option:\n");
		printf("1.) Select input file name\n");
		printf("2.) Select output file name\n");
		printf("3.) Select affine cipher key\n");
		printf("4.) Encrypt input file then write to output file\n");
		printf("5.) Decrypt input file then write to output file\n");
		printf("6.) Get directory listing\n");
		printf("7.) Exit\n");
		printf(":");
		//gets user input
		scanf("%d", &choice);
		rewind(stdin);
		//starts a switch 
		switch (choice) {
		case 1: {
			//gets input file name
			printf("Input file name: ");
			scanf("%s", &input);
			//allowes the user to read output before continuing
			printf("Press and key to continue...");
			_getch();
			break;
			}
		case 2: {
			//gets output file name
			printf("Output file name: ");
			scanf("%s", &output);
			//allowes the user to read output before continuing
			printf("Press and key to continue...");
			_getch();
			break;
		}
		case 3: {
				//gets A value and calculates a^-1
				printf("Enter A: ");
				scanf("%d", &a);
				power = pow((double)a,-1);
				//gets B value
				printf("\nEnter B: ");
				scanf("%d", &b);
				//tests for prime
				CoprimeTest(a, b);
				while (CoprimeTest(a, b) == FALSE) {
					printf("\nNumbers are not prime\n");
					printf("Enter A: ");
					scanf("%d", &a);
					printf("\nEnter B: ");
					scanf("%d", &b);

					CoprimeTest(a, b);
				}
				//allowes the user to read output before continuing
				printf("Press and key to continue...");
				_getch();
				break;
		}
		case 4: {
			//open file if it doesn't exist then make it
			FILE* inputFile = NULL;
			inputFile = fopen(input, "r+");
			rewind(inputFile);
			ReadStringFromFile(inputFile, charArray);
			//if the file can't be opened or created exit
			if (inputFile == NULL) {
				printf("The file could not be opened for reading... exiting program.\n");
				_getch();
				return 1;
			}
			//gets how many characters in the file
			while (charArray[j] != '\0') {
				j++;
					size++;
			}
			j = 0;
			//reads text from file then prints it
			printf("Plain Text: ");
			for (int x = 0; x <= size; x++) {
				printf("%c", charArray[x]);
			}
			printf("\n");
			//cleans string then prints it
			CleanString(charArray);
			while (charArray[j] != '\0') {
				j++;
				newSize++;
			}
			j = 0;
			printf("Clean Text: ");
			for (int x = 0; x <= newSize; x++) {
				printf("%c", charArray[x]);
			}
			printf("\n");
			//encrypts string then prints it then sends it to the output file
			EncryptString(charArray, a, b, ALPHABET_SIZE);
			printf("Encrypted String: ");
			for (int x = 0; x <= newSize; x++) {
				printf("%c", charArray[x]);
			}
			//opens output file
			FILE* outputFile = NULL;
			outputFile = fopen(output, "w+");
			//checks to see if the file is real
			if (outputFile == NULL) {
				printf("The file could not be opened for reading... exiting program.\n");
				_getch();
				return 1;
			}
			//writes string to file
			WriteStringToFile(outputFile, charArray);
			//closes file
			fclose(outputFile);
			printf("\n");
			//close file
			fclose(inputFile);
			//allowes the user to read output before continuing
			printf("Press and key to continue...");
			_getch();
			break;
		}
		case 5: {
			//prints encrypted text
			printf("Encrypted Text: ");
			for (int x = 0; x <= newSize; x++) {
				printf("%c", charArray[x]);
			}
			printf("\n");
			//prints clean text then prints it in the file
			DecryptString(charArray, a, b, ALPHABET_SIZE);
			printf("Clean Text: ");
			for (int x = 0; x <= newSize; x++) {
				printf("%c", charArray[x]);
			}
			//opens output file
			FILE* outputFile = NULL;
			outputFile = fopen(output, "w+");
			//checks to see if the file is real
			if (outputFile == NULL) {
				printf("The file could not be opened for reading... exiting program.\n");
				_getch();
				return 1;
			}
			//writes string to file
			WriteStringToFile(outputFile, charArray);
			//closes file
			fclose(outputFile);
			printf("\n");
			//allowes the user to read output before continuing
			printf("Press and key to continue...");
			_getch();
			break;
		}
		case 6: {
			//prints system directory
			system("dir / p");
			//allowes the user to read output before continuing
			printf("Press and key to continue...");
			_getch();
			break;
		}
		case 7: {
			//exit
			_getch();
			return 0;
		}
		default: {
			printf("Not a valid choice\n");
			break;
		}
		}
		
	}
}

char *ReadStringFromFile(FILE *ptr, char* charArray) {

	char charHolder = ' ';
	int x = 0;
	// read data from the file with fgetc()
	while ((charHolder = fgetc(ptr)) != EOF) {
		charArray[x] = charHolder;
		x++;
	}
	return charArray;
}

char *WriteStringToFile(FILE* ptr,char* charArray) {
	int j = 0;
	int size = 0;

	//gets the size of the string in the array
	while (charArray[j] != '\0') {
		j++;
		size++;
	}
	//copies the string to an array
	for (int x = 0; x < size; x++) {
		fprintf(ptr, "%c", charArray[x]);
	}

	return charArray;
}

char *CleanString(char* cleanMe) {
	// make a clean buffer to copy the sanitized characters to
	char cleanBuffer[BUFFER_SIZE];

	// make a char* and point it at the beginning of the original string
	char* originalIterator = cleanMe;

	// make a char* and point it at the beginning of the clean string
	char* cleanIterator = cleanBuffer;

	// walk through the original string one character at a time
	// sanitizing and copying the appropriate contents to the
	// cleanBuffer
	while (*originalIterator != '\0') {
		// if the character is a lowercase, just copy it
		if (*originalIterator >= 'a' && *originalIterator <= 'z') {
			*cleanIterator = *originalIterator;
			cleanIterator++;
		}

		// if the character is uppercase, convert it to lowercase and copy it
		else if (*originalIterator >= 'A' && *originalIterator <= 'Z') {
			*cleanIterator = *originalIterator + 32;
			cleanIterator++;
		}

		// goto the next character in the original string
		originalIterator++;
	}

	// null terminate the cleanBuffer
	*cleanIterator = '\0';

	// copy the cleanBuffer into cleanMe
	strcpy(cleanMe, cleanBuffer);

	return cleanMe;
}

char *EncryptString(char* encryptMe, int a, int b, int n) {
	// YOUR IMPLEMENTATION GOES HERE
	int y = 0;
	int j = 0;
	int index = 0;
	int size = 0;
	//gets string size
	while (encryptMe[j] != '\0') {
		size++;
		j++;
	}
	//encrypts string
	for (int i = 0; i < size; i++)
	{
		if (encryptMe[i] != ' ') {
			index = (int)encryptMe[i] - 'a';
			y = (a * index + b) % ALPHABET_SIZE;

			encryptMe[i] = (char)y + ASCII_OFFSET;
		}
		else {
			encryptMe[i] = ' ';
		}
	}

	return encryptMe;
} // end - EncryptString()

char *DecryptString(char* decryptMe, int a, int b, int n) {
	// YOUR IMPLEMENTATION GOES HERE
	int y = 0;
	int index = 0;
	int j = 0;
	int size = 0;
	//gets string size
	while (decryptMe[j] != '\0') {
		size++;
		j++;
	}
	//decrypts string
	for (int i = 0; i < size; i++) {
		if (decryptMe[i] == ' ') {
			decryptMe[i] = ' ';
		}
		else {
			index = (int)decryptMe[i] - 'a';
			y = ModularInverse(0, a) * (index - b) % ALPHABET_SIZE;

			if (y < 0) {
				y += ALPHABET_SIZE;
			}

			decryptMe[i] = (char)y + ASCII_OFFSET;
		}
	}

	return decryptMe;
} // end - DecryptString()

int ModularInverse(int target, int a) {
	// AN IMPLEMENTATION FOR THIS FUNCTION WAS PROVIDED IN CLASS
	int x = 0;

	while (target != 1) {
		if ((a * x) % ALPHABET_SIZE != 1) {
			target = 0;
			x++;
		}
		else {
			target = 1;
		}
	}

	return x;
} // end - ModularInverse()

int IsPrime(int amIPrime) {
	// AN IMPLEMENTATION FOR THIS FUNCTION WAS PROVIDED IN CLASS
	int i = 0;
	int isPrime = TRUE;

	// check for border cases
	if (amIPrime <= 1) {
		isPrime = FALSE;
	}

	// force check the number for primality
	for (i = 2; i < amIPrime; i++) {
		if (amIPrime % i == 0)
			isPrime = FALSE;
	}

	return isPrime;
} // end - IsPrime()

int CoprimeTest(int numOne, int numTwo) {
	// AN IMPLEMENTATION FOR THIS FUNCTION WAS PROVIDED IN CLASS
	int i = 0;
	int areCoprime = TRUE;
	int larger = 0;
	int smaller = 0;

	// determine that larger of the two numbers
	if (numOne >= numTwo) {
		larger = numOne;
		smaller = numTwo;
	}
	else {
		larger = numTwo;
		smaller = numOne;
	}

	for (i = 1; i <= larger; i++) {
		// find a prime factor for numOne
		if (larger % i == 0 && IsPrime(i))
			// determine if numTwo is divisible by the candidate prime
			if (smaller % i == 0)
				areCoprime = FALSE;
	}

	// return the result
	return areCoprime;
} // end - CoprimeTest()
